location: ''
project:
  name: apidoc
  version: 0.4.a.draft
  history: []
  links:
    - >-
      (github) github <https://github.com/insaint03/apidocs|repository,
      https://github.com/insaint03/apidocs/issues|issues>
    - >-
      (adv) with advance
      <https://vuejs.org|vue.js,https://vitejs.dev|vite.js,https://vuetifyjs.com|vuetify.js,https://github.com/nodeca/js-yaml|js-yaml,https://markdown-it.github.io/|markdown-it>
      Thanks for the efforts!
    - (ref) referenced
    - >-
      <https://swagger.io|OpenAPI
      specification/swagger,https://redocly.com|redocly>
  license: (CC) CC-BY-NC-SA 4.0 <https://creativecommons.org/licenses/by-nc-sa/4.0/>
  contributors:
    - >-
      (owner) yg.song
      <https://www.linkedin.com/in/%EC%9A%A9%EA%B7%BC-%EC%86%A1-53868187/|LinkedIn>
      a.k.a dxnlab
  description: >-
    Rest(ful) API documentation editor/viewer

    ## Face the truth:

    ---

    There are a few good technical leaders who keeps documentation clean & clear
    while running a project. **I AM NOT**. I suppose you are, too. It's always
    hard to maintain humane-resources for many of us, ***geeky engineers***. But
    the paper work works at work. Actually **IT IS CRITICAL**. Not just for me,
    I got to do something to ease the burden. 


    &nbsp;


    - **Faster**, It must save time & effort to build and maintain the document,
    as top-priority

    - **Easier**, and should be easier at share & update.

    - **For developers**, No, Providers/consumers of these resources are always
    ought to be ***geeks*** like us. ***BE EFFICIENT***. Make it short / clear /
    and save storage.


    &nbsp;


    ### Yet OpenAPI specification / Swagger is good; however,

    ---

    The [openapi specification](https://swagger.io) did right thing. But It's
    too much for those running in out of time. ***Spreadsheet*** is the another
    alternative. __Now, here comes the mid__.


    &nbsp;


    To ease API doc building and/or management:

    - For developers whom need to share endpoint definitions

    - And for Service users whom needs reference document


    &nbsp;


    ***BE EFFICIENT***, leave out anything else.
datatypes:
  document:
    name: document
    basistype: object
    description: >-
      unit of data: yaml/json file

      A **document** contains:

      - ***project*** meta information to describe the project

      - ***datatypes*** list of data scheme definitions

      - ***entities*** or, ***endpoints*** that are request-response pairs,
      indicating expectations.

      - ***templates*** are common components, which can advant at mixing
      entities.


      &nbsp;


      It can be loaded/updated via external document `File > open/import`, or
      downloaded `File > save/download`. And one can easily publish other
      document with `Embedding` html.
    items:
      '!project': project
      '!datatypes': document._datatypes
      '!entities': document._entities
      '!templates': document._templates
    examples: []
  project:
    name: project
    basistype: object
    description: project description
    items:
      '!name': _.naming
      version: project._version
      description: _.description
      license: liner
      links: project._links
      terms: project._terms
      contributors: project._contributors
      history: project._history
    examples: []
  datatype:
    name: datatype
    basistype: object
    description: data scheme definition either/or type descriptor
    items:
      '!name': _.naming
      '!basistype': datatype._basistype=string
      description: _.description
      items: items
      migration: datatype._migration
      defaults: datatype._defaults
      evaluation: datatype._evaluation
    examples: []
  template:
    name: template
    basistype: object
    description: >-
      common data fragment to build endpoints

      Template is the core building block of `apidocs`. As its name suggests, it
      holds ***template*** data to be set on an `endpiont entity`. One might
      further ***mix templates*** to get a list of endpoints of the kinds.
    items:
      '!name': _.naming
      description: _.description
      extend: template._extend
      datatypes: template._datatypes
      request: request
      response: response
    examples: []
  endpoint:
    name: endpoint
    basistype: object
    description: >-
      endpoint, 1to1 request-response pair

      If works has done right, a single API endpoint - determined by options on
      its `request` - ought to have a single, unique corresponding `response`.
      There, `apidocs` assumed an endpoint definition takes a single request and
      an unique response, either. In case of error-ly responses, One might state
      error responses by patternizing request pattern. (`/*beta*/`)
    items:
      description: _.description
      templates: endpoint._templates
      '!request': request
      '!response': response
    examples: []
  request:
    name: request
    basistype: object
    description: http request message description
    items:
      '!method': request._method=GET
      '!path': request._path
      description: _.description
      queries: _.http_queries
      headers: _.http_headers
      cookies: _.http_cookies
      body: _.http_body
    examples: []
  response:
    name: response
    basistype: object
    description: http response description
    items:
      status: response._status=200(OK)
      mimetype: response._mimetype=application+json
      headers: _.http_headers
      cookies: _.http_cookies
      body: _.http_body
    examples: []
  document._datatypes:
    name: document._datatypes
    basistype: object
    description: datatype dictionary in document
    items:
      '[name]': datatype
    examples: []
  document._templates:
    name: document._templates
    basistype: object
    description: template dictionary in document
    items:
      '[name]': template
    examples: []
  document._entities:
    name: document._entities
    basistype: array
    description: endpoint array in document
    items:
      - endpoint
    examples: []
  liner:
    name: liner
    basistype: object
    description: (keytype) title <links,...> description
    items:
      '!key': liner._key
      '!title': liner._title
      links: _.liner_links
      description: liner._description
    examples: []
  liner._key:
    name: liner._key
    basistype: string
    description: liner keytype
    examples: []
  liner._title:
    name: liner._title
    basistype: string
    description: human-readable title
    examples: []
  liner._description:
    name: liner._description
    basistype: string
    description: liner description
    examples: []
  _.multi_liner:
    name: _.multi_liner
    basistype: array
    description: array of liners
    items:
      - liner
    examples: []
  _.liner_link:
    name: _.liner_link
    basistype: object
    description: link description in liner. separated by comma (,)
    items:
      '!href': _.liner_link._href
      anchor: _.liner_link._anchor
    examples: []
  _.liner_link._href:
    name: _.liner_link._href
    basistype: string
    description: hyperlink location string
    examples: []
  _.liner_link._anchor:
    name: _.liner_link._anchor
    basistype: string
    description: hyperlink title to show, use href instead if not presented
    examples: []
  _.liner_links:
    name: _.liner_links
    basistype: array
    description: liner link array
    items:
      - _.liner_link
    examples: []
  items:
    name: items
    basistype: array
    description: datatype contained element description
    items:
      - _.object_item
      - _.array_item
      - _.enum_item
    examples: []
  _.object_item:
    name: _.object_item
    basistype: object
    description: object/dict type containment
    items:
      '!key': _.object_item._key
      '!datatype': _.object_item._datatype
      defaults: _.object_item._defaults
      description: _.object_item._description
    examples: []
  _.enum_item:
    name: _.enum_item
    basistype: object
    description: |-
      enumeration element item description.
      Splice text by first - leftmost - space, value and its description
    items:
      '!value': _.enum_item._value
      desc: _.enum_item._desc
    examples: []
  _.naming:
    name: _.naming
    basistype: string
    description: single line naming format. separated as <...namespace.>localname
    examples: []
  _.description:
    name: _.description
    basistype: string
    description: >-
      multiline string description

      first line sets summary/title, others gets detailed description that
      presented in markdown format
    examples: []
  project._version:
    name: project._version
    basistype: string
    description: project version string
    examples: []
  project._license:
    name: project._license
    basistype: liner
    description: project license item in liner
    items: {}
    examples: []
  project._links:
    name: project._links
    basistype: array
    description: project links in liner format
    items:
      - liner
    examples: []
  project._terms:
    name: project._terms
    basistype: array
    description: legal information about the project, within liner format
    items:
      - liner
    examples: []
  project._contributors:
    name: project._contributors
    basistype: array
    description: project contributors, within liner format
    items:
      - liner
    examples: []
  project._history:
    name: project._history
    basistype: object
    description: project history logs to show version history
    items:
      '[version]': _.multi_liner
    examples: []
  _.object_item._key:
    name: _.object_item._key
    basistype: string
    description: item key string
    examples: []
  _.object_item._datatype:
    name: _.object_item._datatype
    basistype: string
    description: item datatype basis
    examples: []
  _.object_item._defaults:
    name: _.object_item._defaults
    basistype: string
    description: default value
    examples: []
  _.object_item._description:
    name: _.object_item._description
    basistype: string
    description: description string
    examples: []
  _.enum_item._value:
    name: _.enum_item._value
    basistype: string
    description: enumeration value. spliced at first space
    examples: []
  _.enum_item._desc:
    name: _.enum_item._desc
    basistype: string
    description: enumeration description. Rest of the text after first space
    examples: []
  datatype._basistype:
    name: datatype._basistype
    basistype: string
    description: direct inheritance parent typename
    examples: []
  datatype._migration:
    name: datatype._migration
    basistype: string
    description: If applied to DB, its corresponding table/schema name
    examples: []
  datatype._defaults:
    name: datatype._defaults
    basistype: string
    description: default value
    examples: []
  datatype._evaluation:
    name: datatype._evaluation
    basistype: string
    description: evaluation function, eval applicable with js
    examples: []
  request._method:
    name: request._method
    basistype: string
    description: |-
      http request method
      one in:
      - GET
      - POST
      - PUT
      - PATCH
      - DELETE
    examples: []
  request._path:
    name: request._path
    basistype: string
    description: http request pathname, delimited by slash (/)
    examples: []
  _.http_body:
    name: _.http_body
    basistype: string
    description: http body datatype name
    examples: []
  response._status:
    name: response._status
    basistype: string
    description: |-
      response status code and/or its name
      defaults `200 (OK)`
    examples: []
  response._mimetype:
    name: response._mimetype
    basistype: string
    description: |-
      response mimetype 
      To show data serialization scheme
    examples: []
  _.http_queries:
    name: _.http_queries
    basistype: array
    description: http search query
    items:
      - _.object_item
    examples: []
  _.http_headers:
    name: _.http_headers
    basistype: array
    description: http header parameter
    items:
      - _.object_item
    examples: []
  _.http_cookies:
    name: _.http_cookies
    basistype: array
    description: http cookie parameter
    items:
      - _.object_item
    examples: []
  endpoint._templates:
    name: endpoint._templates
    basistype: array
    description: endpoint templates, by names
    items:
      - _.naming
    examples: []
  template._tagname:
    name: template._tagname
    basistype: string
    description: tagname to make group
    examples: []
  template._extend:
    name: template._extend
    basistype: string
    description: direct-parent base template name
    examples: []
  template._datatypes:
    name: template._datatypes
    basistype: array
    description: template associated datatype names
    items:
      - _.naming
    examples: []
  datatype._origins:
    name: datatype._origins
    basistype: enum
    description: ''
    items:
      - boolean
      - number
      - string
      - array
      - object
      - enum
    examples: []
  type_constraint:
    name: type_constraint
    basistype: object
    description: type constraints to suggest body datatype in template
    items:
      inherits: type_constraint._inherits
      contains: type_constraint._contains
      keyname: type_constraint._keyname
      fixed: type_constraint._fixed
    examples: []
  type_constraint._inherits:
    name: type_constraint._inherits
    basistype: _.naming
    description: '(/datatype): suggest datatype inherits the datatype by name'
    examples: []
  type_constraint._contains:
    name: type_constraint._contains
    basistype: _.naming
    description: (@datatype) suggest datatype contains in item, by its name
    examples: []
  type_constraint._keyname:
    name: type_constraint._keyname
    basistype: string
    description: >-
      (#keyname) suggest datatype has the keyname in its item (ought to be
      object or enum), by name
    examples: []
  type_constraint._fixed:
    name: type_constraint._fixed
    basistype: _.naming
    description: (!datatype) force the datatype to be suggested
    examples: []
  _.array_item:
    name: _.array_item
    basistype: _.naming
    description: array element applicable datatype name
    examples: []
templates:
  _foundation.root:
    name: _foundation.root
    tagname: null
    datatypes: []
    request:
      method: null
      path: null
    response:
      mimetype: application/json
      status: null
    description: ''
  _foundation.auth:
    name: _foundation.auth
    extend: _foundation.root
    tagname: null
    datatypes: []
    request:
      method: null
      path: null
    response:
      mimetype: application/json
      status: null
    description: ''
  _foundation.list:
    name: _foundation.list
    extend: _foundation.root
    tagname: null
    datatypes: []
    request:
      method: GET
      path: null
    response:
      mimetype: application/json
      status: null
      body:
        - inherit: array
    description: ''
  _foundation.get:
    name: _foundation.get
    extend: _foundation.root
    tagname: null
    datatypes: []
    request:
      method: GET
      path: null
    response:
      mimetype: application/json
      status: null
      body:
        - inherit: object
    description: ''
  _foundation.create:
    name: _foundation.create
    extend: _foundation.root
    tagname: null
    datatypes: []
    request:
      method: POST
      path: null
    response:
      mimetype: application/json
      status: null
      body:
        - inherit: object
    description: ''
  _foundation.update:
    name: _foundation.update
    extend: _foundation.root
    tagname: null
    datatypes: []
    request:
      method: PUT
      path: null
    response:
      mimetype: application/json
      status: null
      body:
        - inherit: object
    description: ''
  _foundation.delete:
    name: _foundation.delete
    extend: _foundation.root
    tagname: null
    datatypes: []
    request:
      method: DELETE
      path: null
    response:
      mimetype: application/json
      status: null
      body:
        - inherit: object
    description: ''
  core:
    name: core
    tagname: core
    datatypes:
      - document
      - project
      - datatype
      - template
      - endpoint
    request:
      method: null
      path: /x/
    response:
      mimetype: null
      status: null
    description: >-
      Put every information at a single unit file, document.

      A ***document*** sets core data storage that needed at building,
      maintaining, and share rest(ful) API documentation.


      &nbsp;


      One can simply create, import, save, share, view and share via a single
      document - within yaml/json format.

      There are 2 modes; **View** and **Edit** at the service. At ***view
      mode*** - it's document viewer to look over concurrent contents. Anthoer,
      ***edit mode***, updating the contents.
  datatype:
    name: datatype
    tagname: datatype
    datatypes:
      - datatype
      - items
    request:
      method: null
      path: /x/datatype
    response:
      mimetype: null
      status: null
      body:
        - fixed: datatype
    description: >-
      Data scheme information

      It's all about data. ***datatypes*** are information on data schemes
      within the project.



      &nbsp;


      A datatype entity has:

      - ***name***: typename identifier, at `....namesapce.localname` format.

      - ***description***: type description

      - ***migration***: the datatype, especially when its object-alike, it
      could be a type related with a **DB table** that can be migrated.
      migration stands for **DB table/scheme name** to be migrated when stated,
      or ignored when null.

      - ***basistype***: a class can be inherited. A Datatype can be so.

      - ***is_primitive***: If the datatype is primitive type or not. If the
      type is primitive, a) it won't be apeared on editor-datatype tab, b) it
      won't be found on viewer reference list, c) fianlly, it will derive
      another datatype description when set to be an object item datatype.

      - ***items***: `object` (`dict` and/or `map`), `array`, `enum` are
      collective types that contains items. If it's object/dict-alike type, it
      would be `key-value` pairs, or can be available `datatype names`, `value`
      and its description for `array`s, or `enum` either corresponding order.


      - ---

      - **(below planned to be added/fixed in a near futuer)**

      - ***defaults***: type-level default value

      - ***evaluation***: type evaluation function, by `js eval`-available
      description

      - ***examples***: example values of the type
  template:
    name: template
    tagname: template
    datatypes:
      - template
      - type_constraint
    request:
      method: null
      path: /x/template
    response:
      mimetype: null
      status: null
    description: >-
      Building blocks for the endpoints

      Template sets the core building block of `apidocs`. As its name suggests,
      it holds ***template*** data to be set on an `endpiont entity`. One might
      further ***mix templates*** to get a list of endpoints of the kinds.
  endpoint:
    name: endpoint
    tagname: endpoint
    datatypes:
      - endpoint
      - request
      - response
      - request._path
      - type_constraint
    request:
      method: null
      path: /x/endpoint
    response:
      mimetype: null
      status: null
    description: >-
      endpoint, 1to1 request-response pair

      If works has done right, a single API endpoint - determined by options on
      its `request` - ought to have a single, unique corresponding `response`.
      There, `apidocs` assumed an endpoint definition takes a single request and
      an unique response, either. In case of error-ly responses, One might state
      error responses by patternizing request pattern. (`/*beta*/`)
  patterns:
    name: patterns
    tagname: util.patterns
    datatypes:
      - _.naming
      - _.description
      - liner
      - items
      - _.object_item
      - _.array_item
      - _.enum_item
      - request._path
      - type_constraint
    request:
      method: null
      path: /x/util
    response:
      mimetype: null
      status: null
    description: >-
      Utilized string patterns

      - `naming` (in `datatype`.name, `template`.name) - `description`  -
      `Liner` (in `project` - license, links, terms, contributors property) -
      `Items`
        - : `object_item` (in object.`items`, request.queries, http.headers, http.cookies)
        - : `array_item` (in array.`items`)
        - : `enum_item` (in enum.`items`)
      - `request.path` - `http.body` (body constraints, in `template` -
      request.body, response.body)
  beta:
    name: beta
    tagname: futuer.beta
    datatypes: []
    request:
      method: null
      path: /z/beta
    response:
      mimetype: null
      status: null
    description: >-
      To be updated within beta (expected to be in year 2024)

      Concurrent (Jul.2024.) version is alpha/draft. The goal for now, is clear
      refactoring and add essential features to open.

      Expecting couple of months would be needed to remove ***draft*** suffix,
      and 1-2 months should be taken to be beta, since the project lower its
      priority since today. Bug fixes, feature updates, and so on will continue,
      though let me see how this affects to the ground!
  futuer:
    name: futuer
    tagname: futuer
    datatypes: []
    request:
      method: POST
      path: /z/future
    response:
      mimetype: null
      status: null
    description: >-
      To be updated after beta (2025 or later)

      Here apidocs is just a simple step, there's a long long ways to go.
      There's many features prepared but not presented, either not has began
      yet.

      The timeline will be adapted as the situation goes.
entities:
  - templates:
      - core
      - _foundation.get
    description: >-
      View a document

      - **viewer mode:** click eye-icon from upper right corner on edit mode.

      - **embed mode:** one can publish at there location with embeding .html.
       try ***File > embedding...*** menu
      - **download data** one can download data only, to advance at embeding
      mode. try ***File > save/download***
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /x/
      queries:
        location: uri
        timestamp: timestamp
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: document
      mimetype: application/json
      status: 200
  - templates:
      - core
      - _foundation.create
    description: >-
      Create a document

      - create from scratch: ***File > clear new***

      - import from other (web) location data : ***File > open/import ...***

      - load from local yaml contents: at edit mode, go ***txt*** tab at bottom
      to see text editor field. place yaml text content there, click "SAVE" at
      top/end right corner.
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /x/
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: document
      mimetype: application/json
      status: 200
  - templates:
      - core
      - _foundation.update
    description: >-
      Edit a document

      editor mode has total 5 tabs (at bottom)

      - **project**: project meta data info

      - **datatypes**: edit data types at this section. beware, left-side
      datatypes tab is multi-selectable, multi-editable.

      - **endpoints**: edit endpoint/entities here. Mix & match templates to
      run. It will be last place to run.

      - **templates**: "templates", are - as its name suggest - are data
      fragment which used in common. The component can be hierarchical
      inherited, and/or mix and combined.
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: PUT
      path: /x/
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: document
      mimetype: application/json
      status: 200
  - templates:
      - datatype
      - _foundation.list
    description: >-
      List datatypes

      At the bottom of `edit` mode, 5 tabs are presented. `datatypes` mode is
      second of the tabs. Or, selecting any of `datatypes` left-side panel
      (shown on `datatypes`, `endpoints` tabs) will move over tabs.


      &nbsp;


      The side panel is multi-selectable, not like `templates` panel at the
      opposite side. Since `datatypes` are concreate component of the content
      but `templates` are rather abstract building blocks, **datatypes are
      multi-selectable and multi-updatable**. Clicking datatype with `ctrl` or
      `shift` key held, the selection will be toggled.


      Editor form at the middle shows the data. When it's multi-selected, only
      fields has value in common are enabled to edit. Which implies, one can
      alternate every `object (dict)` into `array` at a single update, however
      can NOT update a `string` type and `number` type into `boolean` at once.
    request:
      description: ''
      headers: []
      cookies: {}
      body: null
      method: GET
      path: /x/datatype
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: datatype
      mimetype: application/json
      status: 200
  - templates:
      - datatype
      - _foundation.create
    description: >-
      Create datatypes

      datatype names are ***unique identifier*** among the project. Take advance
      <namespace> prefix to avoid overlapping.


      1. create at edit mode - `datatypes` tab:
       - deselect any datatype from left-side panel `datatypes`
       - multiline `names`, common basistype form will be presented
       - put names (seperated by newline) to create, then click "SAVE" button at the right hand side of the form.
      2. create at `datatypes` side panel
       - place a name at `search & create` field.
       - press `ctrl+enter` to create the type by the name. basistype set default `object`.
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: datatype
      method: POST
      path: /x/datatype
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: datatype
      mimetype: application/json
      status: 200
  - templates:
      - datatype
      - _foundation.get
    description: >-
      Get a single datatype

      On edit mode, section `datatypes` and/or `endpoints`, left-hand side panel
      `datatypes` is a place that can select to read/get datatype(s).


      &nbsp; 


      Single click will toggle a single datatype selection and, `ctrl+click` or
      `shift+click` will multi select toggle the datatypes.



      However, editor pane in the middle of `datatypes` tab section, will show
      selected datatype(s)'s properties.

      Refer (c)Apple itunes property editor on multi-item selection, only
      properties in common can be set by the setting.
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /x/datatype/<datatype_name>
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: datatype
      mimetype: application/json
      status: 200
  - templates:
      - datatype
      - _foundation.update
    description: Edit datatypes
    request:
      description: ''
      headers: []
      cookies: {}
      body: null
      method: PUT
      path: /x/datatype
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: datatype
      mimetype: application/json
      status: 200
  - templates:
      - template
      - _foundation.list
    description: List templates
    request:
      description: ''
      headers: []
      cookies: {}
      body: null
      method: GET
      path: /x/template
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: template
      mimetype: application/json
      status: 200
  - templates:
      - template
      - _foundation.get
    description: Get a single template
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /x/template/<template_name>
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: template
      mimetype: application/json
      status: 200
  - templates:
      - template
      - _foundation.create
    description: Create templates
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /x/template
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: template
      mimetype: application/json
      status: 200
  - templates:
      - template
      - _foundation.update
    description: Edit templates
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: PUT
      path: /x/template
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: template
      mimetype: application/json
      status: 200
  - templates:
      - endpoint
      - _foundation.list
    description: List endpoints
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /x/endpoint
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: endpoint
      mimetype: application/json
      status: 200
  - templates:
      - endpoint
      - _foundation.get
    description: Get a single endpoint
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /x/endpoint
      queries:
        index: number
    response:
      description: ''
      headers: []
      cookies: {}
      body: endpoint
      mimetype: application/json
      status: 200
  - templates:
      - endpoint
      - _foundation.create
      - template
    description: >-
      Create endpoints.

      At edit mode, `endpoints` section, simply click `+` button top-right side
      of the panel will append a single (blank) endpoint.


      &nbsp;


      Try `Mix` button instead. At `Mix` button, it will show a dialog that can
      select sequences of templates. After selecting templates at each stage, it
      will adds **combinatorial** (cartesian - cross product) numbers of
      endpoints at once. Normally, there might be a tag-named datatype template
      for each migration type, plus CRUD (corresponding, _foundattion
      `create`/`list`&`get`/`update`/`delete` by order) will be set.
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /x/endpoint
      queries:
        mix: array
    response:
      description: ''
      headers: []
      cookies: {}
      body: endpoint
      mimetype: application/json
      status: 200
  - templates:
      - endpoint
      - _foundation.update
    description: Edit endpoints
    request:
      description: ''
      headers: []
      cookies: {}
      body: null
      method: PUT
      path: /x/endpoint
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: endpoint
      mimetype: application/json
      status: 200
  - templates:
      - null
      - beta
    description: |-
      static usage guide screen
      Build (static) kickstart guide screen to follow
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /y/alpha/guide
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: string
      mimetype: application/json
      status: 200
  - templates:
      - null
      - beta
    description: >-
      body type suggestion

      From `template` body constraints + `template` related datatypes, suggest
      prior candidates to set endpoint request-response body type
    request:
      description: ''
      headers: []
      cookies: {}
      body: null
      method: POST
      path: /y/alpha/body
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: object
      mimetype: application/json
      status: 200
  - templates:
      - null
      - beta
    description: |-
      datatype inheritance
      Derive a child datatype feature, will automatically contains parent-items
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /y/alpha/type_inherit
      queries: {}
    response:
      description: ''
      headers: []
      cookies: {}
      body: object
      mimetype: application/json
      status: 200
  - templates:
      - null
      - beta
    description: show history log screen
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /y/alpha/history
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: string
      mimetype: application/json
      status: 200
  - templates:
      - null
      - beta
    description: |-
      document specification screen
      create document specification screen
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /y/beta/spec
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: document
      mimetype: application/html
      status: 200
  - templates:
      - null
      - beta
    description: |-
      export to swagger
      export document to swagger format
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /y/beta/swagger
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: document
      mimetype: application/json
      status: 200
  - templates:
      - null
      - beta
    description: request path pattern match
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /y/beta/path_pattern
      queries:
        pathname: string
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: request
      mimetype: application/json
      status: 200
  - templates:
      - futuer
    description: >-
      datatype defaults, evaluation, examples

      Add features to datatype models, currently disabled `defaults`,
      `evaluation`, `examples` to work.
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /z/future/datatype
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: datatype
      mimetype: application/json
      status: 200
  - templates:
      - futuer
      - _foundation.get
    description: >-
      Cache current editing

      make concurrent working data be cached within session storage, to achieve
      seamless user experience
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /z/future/cache
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: document
      mimetype: application/json
      status: 200
  - templates:
      - futuer
      - _foundation.delete
    description: |-
      sync repository accounts
      targetting:
      - github
      - mercurial
      - aws/azure/gcp IAM

      to sync & run with external repositories
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: POST
      path: /z/future/iam
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: string
      mimetype: application/json
      status: 200
  - templates:
      - null
      - futuer
    description: |-
      quick build endpoints from datatype
      datatype to build template, then mix CRUD right away to fasten the process
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /z/future/quick
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: time
      mimetype: application/json
      status: 200
  - templates:
      - null
      - futuer
    description: >-
      API explorer

      Advancing `fetch`
      [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API),
      test API explorer feature from viewer / embeddings.
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /z/future/explore
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: object
      mimetype: application/json
      status: 200
  - templates:
      - null
      - futuer
    description: |-
      embedding option
      make embedding rich with multiple options, i.e.:
      - viewer ***theme*** and its ***style options***
      - show/hide ***viewer sections***
    request:
      description: ''
      headers:
        - ''
      cookies: {}
      body: null
      method: GET
      path: /z/future/embed
      queries: {}
    response:
      description: ''
      headers:
        - ''
      cookies: {}
      body: document
      mimetype: application/json
      status: 200
timestamp: 1721380124977
