title: OpenMeter API
version: 1.0.0
description: |-
    OpenMeter is a cloud native usage metering service.
    The OpenMeter API allows you to ingest events, query meter usage, and manage resources.
    ---
    *Operations with the ‚òÅ (cloud) notation are only available in OpenMeter Cloud.*
  license: (Apache 2.0)<http://www.apache.org/licenses/LICENSE-2.0.html>
  links:
    - (Documentation)<https://openmeter.io/docs>

datatypes:
  datetime:
    basistype: string
    validation: "(s)=>/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$/i.test(s)"
    description: |-
      The date and time in ISO 8601 format.
      Example: `2021-01-01T00:00:00Z`
  event:
    basistype: object
    items:
      !id: event.id
      !source: event.source
      !specversion: event.specversion
      !type: event.type
      datacontenttype: event.datacontenttype
      !subject: event.subject
      time: event.time
      data: event.data
  event.id:
    basistype: uuid
    description: Identifies the event
    examples: 
      - f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - 5c10fade-1c9e-4d6c-8275-c52c36731d3c
  event.source:
    basistype: url
    description: Identifies the context in which an event happened.
    examples:
      - service-name
  event.specversion:
    basistype: string
    description: The version of the CloudEvents specification which the event uses.
    examples:
      - "1.0"
  event.type:
    basistype: enum
    description: Describes the type of event related to the originating occurrence.
    examples:
      - prompt
  event.datacontenttype:
    basistype: string
    description: Content type of the data value. Must adhere to RFC 2046 format.
    examples:
      - application/json
  event.dataschema:
    basistype: uri
    description: Identifies the schema that data adheres to.
    examples:
      - http://example.com/schema.json
  event.subject:
    basistype: enum
    description: Describes the subject of the event in the context of the event producer (identified by source).
  event.time:
    basistype: datetime
    description: event time
  event.data:
      basistype: object
      items:
        - key: tokens
          type: decimal
          required: true
        - key: model
          type: string
          required: true
        - key: type
          type: string
          required: true
  events:
    bsistype: array
    items: 
      - event
  meter:
    basistype: object
    items:
      - "!id:meter.id"
      - "!slug:meter.slug"
      - "!description:meter.description"
  meter.id:
    basistype: string
    description: meter id
  meter.slug:
    basistype: string
    description: meter slug
  meter.description:
    basistype: string
    description: meter description multiline
  problem:
    basistype: object
    items:
      !type: problem.type
      !title: problem.title
      !status: problem.status
      !detail: problem.detail
      instance: problem.instance
  problem.type:
    basistype: enum
    description: Type contains a URI that identifies the problem type
    examples:
      - "urn:problem-type:bad-request"
      - "urn:problem-type:internal-server-error"
  problem.title:
    basistype: string
    description: A short, human-readable summary of the problem type
    examples:
      - Bad Request
  problem.status:
    basistype: integer
    description: |-
      The HTTP status code generated by the origin server for this occurrence of the problem
      min. - max. = 400 - 599
    examples:
      - 400
      - 599
  problem.detail:
    basistype: string
    description: A human-readable explanation specific to this occurrence of the problem
    examples:
      - "The 'name' parameter is required"
  problem.instance:
    basistype: string
    description: A URI reference that identifies the specific occurrence of the problem
    examples:
      - "urn:request:local/JMOlctsKV8-000001"

entities:
  - template:
      - get_events
      - response_events
    request:
      method: GET
      path: /api/v1/events
      description: |
        Get a list of events.
      query:
        - key: from
          type: datetime
        - key: to
          type: datetime
        - key: limit
          type: integer
          defaults: 100
          misc: min 1 step 1 to max 100
    response:
      status: 200
      mimetype: application/json
      body: events
  - template:
      - get_events
      - response_bad_request
    request:
      method: GET
      path: /api/v1/events
      query:
        - key: from
          type: datetime
        - key: to
          type: datetime
        - key: limit
          type: integer
          defaults: 100
          misc: min 1 step 1 to max 100
    reponse:
      status: 400
      mimetype: application/json
      body: error
templates:
  events:
    tagname: Events
    request:
      path: /api/v1/events
  get_events:
    inherit: events
    request:
      method: GET
      path: /api/v1/events
      query:
        - key: from
          type: datetime
        - key: to
          type: datetime
        - key: limit
          type: integer
          defaults: 100
          misc: min 1 step 1 to max 100
  response_events:
    response:
      status: 200
      mimetype: application/json
      body: events
  reponse_bad_request:
    response:
      status: 400
      mimetype: application/json
      body: error
  

      
